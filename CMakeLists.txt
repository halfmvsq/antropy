cmake_minimum_required( VERSION 3.10 )

#--------------------------------------------------------------------------------
# Versioning
#--------------------------------------------------------------------------------
set( APPNAME_FULL "Antropy" )
set( ORGNAME_LINE_1 "Penn Image Computing and Science Lab" )
set( ORGNAME_LINE_2 "Department of Radiology" )
set( ORGNAME_LINE_3 "University of Pennsylvania" )

set( VERSION_MAJOR 0 )
set( VERSION_MINOR 3 )
set( VERSION_FEATURE 0 )
set( VERSION_PATCH 0 )
set( VERSION_FULL "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_FEATURE}.${VERSION_PATCH}" )

project( Antropy VERSION ${VERSION_FULL} LANGUAGES C CXX )


#--------------------------------------------------------------------------------
# Important directories
#--------------------------------------------------------------------------------
set( SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src )
set( RES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/resources )
set( EXT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/externals )


#--------------------------------------------------------------------------------
# OpenGL version
#--------------------------------------------------------------------------------
set( GLAD_GL_VERSION "3.3" CACHE STRING "OpenGL Core profile version loaded by GLAD" )
set( GL_VERSION_VALUES "3.3;4.1;4.6" )
set( GLAD_GL_DEBUG false CACHE BOOL "Use OpenGL debugging in GLAD" )

set_property( CACHE GLAD_GL_VERSION PROPERTY STRINGS ${GL_VERSION_VALUES} )


#--------------------------------------------------------------------------------
# Insight Toolkit (ITK) library
#--------------------------------------------------------------------------------
find_package( ITK 5.1.0 REQUIRED )

if( ITK_FOUND )
    include( ${ITK_USE_FILE} )
else()
    message( FATAL_ERROR "ITK was not found. Please set ITK_DIR." )
endif()


#--------------------------------------------------------------------------------
# Visualization Toolkit (VTK) library
# Note: VTK is NOT currently used in this project.
#--------------------------------------------------------------------------------
if( 0 )
    find_package( VTK 8.0 REQUIRED )

    if( VTK_FOUND )
        # no longer used after VTK 8.9
        # include( ${VTK_USE_FILE} )
    else()
        message( SEND_ERROR "VTK was not found. Please set VTK_DIR." )
    endif()
endif()


#--------------------------------------------------------------------------------
# Boost library
#--------------------------------------------------------------------------------
find_package( Boost 1.66 REQUIRED )

if( NOT Boost_FOUND )
    message( FATAL_ERROR "Boost was not found." )
endif()

set( Boost_USE_MULTITHREADED ON )
set( Boost_USE_STATIC_LIBS ON )  # only find static libs


#--------------------------------------------------------------------------------
# GLFW library (included as Git submodule):
# An Open Source, multi-platform library for OpenGL, OpenGL ES and
# Vulkan application development. It provides a simple, platform-independent API
# for creating windows, contexts and surfaces, reading input, handling events, etc.
#--------------------------------------------------------------------------------
set( GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE )
set( GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE )
set( GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE )
set( GLFW_INSTALL OFF CACHE BOOL "" FORCE )

add_subdirectory( ${EXT_DIR}/glfw )


#--------------------------------------------------------------------------------
# GLAD library (NOT included as a Git submodule):
# Multi-Language GL/GLES/EGL/GLX/WGL Loader-Generator based on the official specs
#--------------------------------------------------------------------------------

# Antropy includes the loaders for OpenGL 3.3, 4.1, and 4.6 Core profiles for C,
# though only the loaders for version 3.3 are used in Antropy in order to assure
# compatability across graphics hardware and platforms.

# This source code was generated by cloning the Git repository
# https://github.com/Dav1dde/glad.git and executing
# python3 -m glad --profile core --out-path glad --api gl=3.3 --generator c --spec gl
# (It can also be generated from the webservice at https://glad.dav1d.de/)

string( REPLACE "." ";" GL_VERSION_LIST ${GLAD_GL_VERSION} )
list( GET GL_VERSION_LIST 0 GLAD_GL_VERSION_MAJOR )
list( GET GL_VERSION_LIST 1 GLAD_GL_VERSION_MINOR )

set( GLAD_BASE glad_gl_${GLAD_GL_VERSION}_core )

if( GLAD_GL_DEBUG )
    set( GLAD_BASE ${GLAD_BASE}_debug )
endif()

set( GLAD_DIR ${EXT_DIR}/glad/${GLAD_BASE} )
set( GLAD_INCLUDE_DIR ${GLAD_DIR}/include )

add_library( glad STATIC ${GLAD_DIR}/src/glad.c )
target_include_directories( glad PRIVATE ${GLAD_INCLUDE_DIR} )


#--------------------------------------------------------------------------------
# "Dear ImGui" library (included as Git submodule):
# A bloat-free graphical user interface library for C++. It outputs optimized
# vertex buffers that you can render anytime in your 3D-pipeline enabled
# application. It is fast, portable, renderer agnostic and self-contained
# (no external dependencies).
#--------------------------------------------------------------------------------
set( IMGUI_SRC_DIR ${EXT_DIR}/imgui )
set( IMGUI_BINDINGS_DIR ${SRC_DIR}/ui/imgui )

list( APPEND IMGUI_SOURCES
    ${IMGUI_SRC_DIR}/imgui.cpp
    ${IMGUI_SRC_DIR}/imgui_demo.cpp
    ${IMGUI_SRC_DIR}/imgui_draw.cpp
    ${IMGUI_SRC_DIR}/imgui_tables.cpp
    ${IMGUI_SRC_DIR}/imgui_widgets.cpp
    ${IMGUI_SRC_DIR}/misc/cpp/imgui_stdlib.cpp
)

add_library( imgui STATIC ${IMGUI_SOURCES} )
target_include_directories( imgui PRIVATE ${IMGUI_SRC_DIR} )


#--------------------------------------------------------------------------------
# imGuIZMO.quat (included as Git submodule):
# A ImGui widget: like a trackball it provides a way to rotate models, lights,
# or objects with mouse, and graphically visualize their position in space.
#--------------------------------------------------------------------------------

# Note: Due to warnings in these sources, they modified and included in our local
# source source folder ui/imgui/imGuIZMO.quat

# set( IMGUIZMO_INCLUDE_DIR ${EXT_DIR}/imGuIZMO.quat )


#--------------------------------------------------------------------------------
# "NanoVG" (included as a Git submodule):
# A small antialiased vector graphics rendering library for OpenGL.
# It has lean API modeled after HTML5 canvas API. It is aimed to be a practical
# and fun toolset for building scalable user interfaces and visualizations.
#--------------------------------------------------------------------------------
set( NANOVG_SRC_DIR ${EXT_DIR}/nanovg/src )
list( APPEND NANOVG_SOURCES ${NANOVG_SRC_DIR}/nanovg.c )

add_library( nanovg STATIC ${NANOVG_SOURCES} )
target_include_directories( nanovg PRIVATE ${NANOVG_SRC_DIR} )


#--------------------------------------------------------------------------------
# "JSON for Modern C++" (included as Git submodule):
# Header-only library by Niels Lohmann
#--------------------------------------------------------------------------------
set( JSON_INCLUDE_DIR ${EXT_DIR}/json/include )

# Note: we could also use this method for including the JSON library:
# find_package( nlohmann_json 3.2.0 REQUIRED )
# Include: nlohmann_json::nlohmann_json


#--------------------------------------------------------------------------------
# OpenGL Mathematics (GLM) (included as Git submodule):
# Header-only C++ mathematics library for graphics software based on the OpenGL
# Shading Language (GLSL) specifications.
#--------------------------------------------------------------------------------
set( GLM_INCLUDE_DIR ${EXT_DIR}/glm )


#--------------------------------------------------------------------------------
# spdlog (included as Git submodule):
# Very fast, header-only/compiled, C++ logging library
#--------------------------------------------------------------------------------
set( SPDLOG_INCLUDE_DIR ${EXT_DIR}/spdlog/include )


#--------------------------------------------------------------------------------
# argparse (included as Git submodule):
# Header-only library for argument parsing using modern C++
#--------------------------------------------------------------------------------
set( ARGPARSE_INCLUDE_DIR ${EXT_DIR}/argparse/include )


#--------------------------------------------------------------------------------
# GridCut (NOT included as Git submodule):
# Header-only C++ library of fast max-flow/min-cut solvers optimized for grid graphs
#--------------------------------------------------------------------------------
set( GRIDCUT_INCLUDE_DIR ${EXT_DIR}/gridcut/include )


#--------------------------------------------------------------------------------
# IconFontCppHeaders (included as Git submodule in ${EXT_DIR}/IconFontCppHeaders):
# C, C++ headers and C# classes for icon fonts Font Awesome, Fork Awesome,
# Google Material Design icons, Kenney game icons and Fontaudio.
#--------------------------------------------------------------------------------


#--------------------------------------------------------------------------------
# TinyFSM (included as Git submodule):
# A simple C++ finite state machine library
#--------------------------------------------------------------------------------
set( TINYFSM_INCLUDE_DIR ${EXT_DIR}/tinyfsm/include )


#--------------------------------------------------------------------------------
# stduuid (included as Git submodule):
# A C++17 cross-platform single-header library implementation for universally
# unique identifiers
#--------------------------------------------------------------------------------
set( UUID_INCLUDE_DIR ${EXT_DIR}/stduuid/include )


#--------------------------------------------------------------------------------
# ghc::filesystem (included as Git submodule):
# A header-only single-file std::filesystem compatible helper library, based on the
# C++17 specs, but implemented for C++11, C++14 or C++17 (tightly following the C++17
# with very few documented exceptions).
#
# This library is needed because std::filesystem is not fully implemented on macOS
# prior to version 10.15.
#--------------------------------------------------------------------------------
set( GHC_FILESYSTEM_BUILD_TESTING OFF )
set( GHC_FILESYSTEM_BUILD_EXAMPLES OFF )
set( GHC_FILESYSTEM_WITH_INSTALL OFF )
set( GHC_FILESYSTEM ${EXT_DIR}/filesystem/include )

add_subdirectory( ${EXT_DIR}/filesystem )


#--------------------------------------------------------------------------------
# CMakeRC (included as Git submodule):
# Standalone CMake-Based C++ Resource Compiler
#--------------------------------------------------------------------------------
include( ${EXT_DIR}/cmakerc/CMakeRC.cmake )


#--------------------------------------------------------------------------------
# CMake Modules Collection (included as Git submodule):
# by Ryan A. Pavlik, Ph.D.
# The good thing about these functions is, they will force a CMake re-configure
# before a build every time the HEAD commit changes.
#--------------------------------------------------------------------------------
list( APPEND CMAKE_MODULE_PATH "${EXT_DIR}/cmake-modules/" )

include( GetGitRevisionDescription )
get_git_head_revision( GIT_REFSPEC ANTROPY_GIT_COMMIT_SHA1 )


#--------------------------------------------------------------------------------
# Get other build and Git information
#--------------------------------------------------------------------------------

find_package( Git QUIET )

if( GIT_FOUND )
    message( "Git found: ${GIT_EXECUTABLE} (version ${GIT_VERSION_STRING})" )
endif()

# Get the current working branch
execute_process(
    COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    OUTPUT_VARIABLE ANTROPY_GIT_BRANCH
    OUTPUT_STRIP_TRAILING_WHITESPACE )

# Get the timestamp
execute_process(
    COMMAND ${GIT_EXECUTABLE} show -s --format=%ci ${ANTROPY_GIT_COMMIT_SHA1}
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    OUTPUT_VARIABLE ANTROPY_GIT_COMMIT_TIMESTAMP
    OUTPUT_STRIP_TRAILING_WHITESPACE )

message( STATUS "Git commit info:")
message( STATUS " -Hash: ${ANTROPY_GIT_COMMIT_SHA1}" )
message( STATUS " -Date: ${ANTROPY_GIT_COMMIT_TIMESTAMP}" )
message( STATUS " -Branch: ${ANTROPY_GIT_BRANCH}" )

string( TIMESTAMP BUILD_TIMESTAMP "%Y-%m-%d %H:%M:%S" UTC )


#--------------------------------------------------------------------------------
# Antropy's sources
#--------------------------------------------------------------------------------

# Configure a header file with the versioning information
configure_file(
    ${SRC_DIR}/defines.h.in
    ${CMAKE_CURRENT_BINARY_DIR}/defines.h
    @ONLY
)

set( ATROPY_SOURCES
    ${SRC_DIR}/main.cpp
    ${SRC_DIR}/AntropyApp.cpp

    ${SRC_DIR}/common/CoordinateFrame.cpp
    ${SRC_DIR}/common/DataHelper.cpp
    ${SRC_DIR}/common/DirectionMaps.cpp
    ${SRC_DIR}/common/InputParams.cpp
    ${SRC_DIR}/common/InputParser.cpp
    ${SRC_DIR}/common/MathFuncs.cpp
    ${SRC_DIR}/common/ParcellationLabelTable.cpp
    ${SRC_DIR}/common/Types.cpp
    ${SRC_DIR}/common/UuidUtility.cpp
    ${SRC_DIR}/common/Viewport.cpp

    ${SRC_DIR}/image/Image.cpp
    ${SRC_DIR}/image/ImageColorMap.cpp
    ${SRC_DIR}/image/ImageHeader.cpp
    ${SRC_DIR}/image/ImageIoInfo.cpp
    ${SRC_DIR}/image/ImageSettings.cpp
    ${SRC_DIR}/image/ImageTransformations.cpp
    ${SRC_DIR}/image/ImageUtility.cpp
    ${SRC_DIR}/image/SegUtil.cpp

    ${SRC_DIR}/logic/app/CallbackHandler.cpp
    ${SRC_DIR}/logic/app/Data.cpp
    ${SRC_DIR}/logic/app/Logging.cpp
    ${SRC_DIR}/logic/app/Settings.cpp
    ${SRC_DIR}/logic/app/State.cpp

    # ${SRC_DIR}/logic/annotation/AnnotationHelper.cpp
    ${SRC_DIR}/logic/annotation/Annotation.cpp
    ${SRC_DIR}/logic/annotation/AnnotationGroup.cpp
    ${SRC_DIR}/logic/annotation/LandmarkGroup.cpp

    ${SRC_DIR}/logic/camera/Camera.cpp
    ${SRC_DIR}/logic/camera/CameraHelpers.cpp
    ${SRC_DIR}/logic/camera/CameraTypes.cpp
    ${SRC_DIR}/logic/camera/MathUtility.cpp
    ${SRC_DIR}/logic/camera/OrthogonalProjection.cpp
    ${SRC_DIR}/logic/camera/PerspectiveProjection.cpp
    ${SRC_DIR}/logic/camera/Projection.cpp

    ${SRC_DIR}/logic/interaction/ViewHit.cpp
    ${SRC_DIR}/logic/interaction/events/ButtonState.cpp

    ${SRC_DIR}/logic/serialization/ProjectSerialization.cpp
    ${SRC_DIR}/logic/states/AnnotationStateMachine.cpp

    # We were testing IPC with ITK-SNAP. This functionality is not currently hooked up to Antropy.
    # ${SRC_DIR}/logic/ipc/IPCHandler.cxx

    ${SRC_DIR}/rendering/ImageDrawing.cpp
    ${SRC_DIR}/rendering/Rendering.cpp
    ${SRC_DIR}/rendering/RenderData.cpp
    ${SRC_DIR}/rendering/TextureSetup.cpp
    ${SRC_DIR}/rendering/VectorDrawing.cpp
    ${SRC_DIR}/rendering/utility/containers/VertexAttributeInfo.cpp
    ${SRC_DIR}/rendering/utility/containers/VertexIndicesInfo.cpp
    ${SRC_DIR}/rendering/utility/containers/Uniforms.cpp
    ${SRC_DIR}/rendering/utility/gl/GLBufferObject.cpp
    ${SRC_DIR}/rendering/utility/gl/GLBufferTexture.cpp
    ${SRC_DIR}/rendering/utility/gl/GLErrorChecker.cpp
    ${SRC_DIR}/rendering/utility/gl/GLShader.cpp
    ${SRC_DIR}/rendering/utility/gl/GLShaderProgram.cpp
    ${SRC_DIR}/rendering/utility/gl/GLTexture.cpp
    ${SRC_DIR}/rendering/utility/gl/GLVersionChecker.cpp
    ${SRC_DIR}/rendering/utility/gl/GLVertexArrayObject.cpp
    ${SRC_DIR}/rendering/utility/math/SliceIntersector.cpp

    ${SRC_DIR}/ui/GuiData.cpp
    ${SRC_DIR}/ui/Headers.cpp
    ${SRC_DIR}/ui/Helpers.cpp
    ${SRC_DIR}/ui/ImGuiCustomControls.cpp
    ${SRC_DIR}/ui/ImGuiWrapper.cpp
    ${SRC_DIR}/ui/Popups.cpp
    ${SRC_DIR}/ui/Style.cpp
    ${SRC_DIR}/ui/Toolbars.cpp
    ${SRC_DIR}/ui/Widgets.cpp
    ${SRC_DIR}/ui/Windows.cpp

    ${SRC_DIR}/ui/imgui/imGuIZMO.quat/imGuIZMOquat.cpp

    ${SRC_DIR}/windowing/ControlFrame.cpp
    ${SRC_DIR}/windowing/GlfwCallbacks.cpp
    ${SRC_DIR}/windowing/GlfwWrapper.cpp
    ${SRC_DIR}/windowing/Layout.cpp
    ${SRC_DIR}/windowing/View.cpp
    ${SRC_DIR}/windowing/WindowData.cpp
)

set( EXTERNAL_SOURCES
    ${IMGUI_BINDINGS_DIR}/imgui_impl_glfw.cpp # GLFW bindings for ImGui
    ${IMGUI_BINDINGS_DIR}/imgui_impl_opengl3.cpp # OpenGL 3 bindings for ImGui
)

set( EXTERNAL_HEADERS )

set( SHADERS
    ${SRC_DIR}/rendering/shaders/Correlation.fs
    ${SRC_DIR}/rendering/shaders/Correlation.vs
    ${SRC_DIR}/rendering/shaders/Difference.fs
    ${SRC_DIR}/rendering/shaders/Difference.vs
    ${SRC_DIR}/rendering/shaders/Edge.fs
    ${SRC_DIR}/rendering/shaders/Edge.vs
    ${SRC_DIR}/rendering/shaders/Image.fs
    ${SRC_DIR}/rendering/shaders/Image.vs
    ${SRC_DIR}/rendering/shaders/Overlay.fs
    ${SRC_DIR}/rendering/shaders/Overlay.vs
    ${SRC_DIR}/rendering/shaders/Simple.fs
    ${SRC_DIR}/rendering/shaders/Simple.vs
)

file( GLOB COLORMAPS
    ${RES_DIR}/colormaps/matplotlib/*.csv
    ${RES_DIR}/colormaps/peter_kovesi/*.csv
)

set( FONTS
    ${RES_DIR}/fonts/Cousine/Cousine-Regular.ttf
    ${RES_DIR}/fonts/ForkAwesome/forkawesome-webfont.ttf
    ${RES_DIR}/fonts/Roboto/Roboto-Light.ttf
    ${RES_DIR}/fonts/Roboto/Roboto-Regular.ttf
)


#--------------------------------------------------------------------------------
# Build types and compile options
#--------------------------------------------------------------------------------

set( CMAKE_CONFIGURATION_TYPES "Debug;Release" )
set( CMAKE_VERBOSE_MAKEFILE ON )

set( default_build_type "Release" )

if( NOT CMAKE_BUILD_TYPE )
    set( CMAKE_BUILD_TYPE "${default_build_type}" CACHE
        STRING "Choose the type of build (Debug or Release)" FORCE )

    message( STATUS "Setting build type to '${default_build_type}' as none was specified." )

    # Set the possible values of build type for cmake-gui
    set_property( CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" )
endif()

# Prevent compilation in-source
if( ${CMAKE_BINARY_DIR} STREQUAL ${PROJECT_SOURCE_DIR} )
    message( FATAL_ERROR "Source and build directories are the same." )
endif()


#set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3" )
#set( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fstack-protector-all" )

#message( "CMAKE_CXX_FLAGS_DEBUG is ${CMAKE_CXX_FLAGS_DEBUG}" )
#message( "CMAKE_CXX_FLAGS_RELEASE is ${CMAKE_CXX_FLAGS_RELEASE}" )


# if( UNIX AND NOT APPLE )
#   find_package( OpenGL REQUIRED )
#    add_definitions( ${OPENGL_DEFINITIONS} )
#    find_package( X11 REQUIRED )

  # Note: order is important for setting the libs
  # use pkg-config --libs $(pkg-config --print-requires --print-requires-private glfw3) in a terminal to confirm
  # set( LIBS ${GLFW3_LIBRARY} X11 Xrandr Xinerama Xi Xxf86vm Xcursor GL dl pthread ${ASSIMP_LIBRARY} freetype )
  # set( CMAKE_CXX_LINK_EXECUTABLE "${CMAKE_CXX_LINK_EXECUTABLE} -ldl" )


if( APPLE )
  include_directories( /System/Library/Frameworks )

  find_library( COCOA_LIBRARY Cocoa )
  find_library( OpenGL_LIBRARY OpenGL )
  find_library( IOKit_LIBRARY IOKit )
  find_library( CoreVideo_LIBRARY CoreVideo )

  mark_as_advanced( COCOA_LIBRARY OpenGL_LIBRARY )

  set( APPLE_LIBS ${COCOA_LIBRARY} ${IOKit_LIBRARY} ${OpenGL_LIBRARY} ${CoreVideo_LIBRARY} )
  set( APPLE_LIBS ${APPLE_LIBS} ${GLFW3_LIBRARY} ${ASSIMP_LIBRARY} )
  set( LIBS ${LIBS} ${APPLE_LIBS} )
endif()


#--------------------------------------------------------------------------------
# Define main executable target
#--------------------------------------------------------------------------------
set( EXEC_NAME antropy )


# Embed the resources using CMakeRC
cmrc_add_resource_library( ${EXEC_NAME}-colormaps ALIAS ${EXEC_NAME}::colormaps ${COLORMAPS} NAMESPACE colormaps )
cmrc_add_resource_library( ${EXEC_NAME}-fonts ALIAS ${EXEC_NAME}::fonts ${FONTS} NAMESPACE fonts )
cmrc_add_resource_library( ${EXEC_NAME}-shaders ALIAS ${EXEC_NAME}::shaders ${SHADERS} NAMESPACE shaders )


add_executable( ${EXEC_NAME} )

target_sources( ${EXEC_NAME} PRIVATE
    ${ATROPY_SOURCES}
    ${ATROPY_HEADERS}
    ${EXTERNAL_SOURCES}
)

target_link_libraries( ${EXEC_NAME} PRIVATE
    ${ITK_LIBRARIES}
#    ${VTK_LIBRARIES}
    ${Boost_LIBRARIES}
    ghc_filesystem
    glfw
    glad
    imgui
    nanovg
    ${EXEC_NAME}::colormaps
    ${EXEC_NAME}::fonts
    ${EXEC_NAME}::shaders
)

target_include_directories( ${EXEC_NAME} PRIVATE
    ${CMAKE_CURRENT_BINARY_DIR} # defines.h is here
    ${SRC_DIR}
    ${EXT_DIR}
    ${RES_DIR}
    ${GLFW_INCLUDE_DIRS}
    ${GHC_FILESYSTEM}
    ${GLAD_INCLUDE_DIR}
    ${IMGUI_BINDINGS_DIR}
    ${ITK_INCLUDE_DIRS}
    ${JSON_INCLUDE_DIR}
    ${TINYFSM_INCLUDE_DIR}
    ${UUID_INCLUDE_DIR}
#    ${VTK_INCLUDE_DIRS}
)

# These libraries are in 'system' includes in order to ignore their compiler warnings:
target_include_directories( ${EXEC_NAME} SYSTEM PRIVATE
    ${ARGPARSE_INCLUDE_DIR}
    ${Boost_INCLUDE_DIR}
    ${EARCUT_INCLUDE_DIR}
    ${GLM_INCLUDE_DIR}
    ${GRIDCUT_INCLUDE_DIR}
    ${NANOVG_SRC_DIR}
    ${SPDLOG_INCLUDE_DIR}
)

target_compile_definitions( ${EXEC_NAME} PRIVATE
#    ${VTK_DEFINITIONS}
)

target_compile_options( ${EXEC_NAME} PRIVATE
     $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:
          -Werror -Wall -Wextra -Wpointer-arith -Winit-self -Wfloat-equal -Wunreachable-code
          -Wshadow -pedantic-errors -g -ftrapv -march=native>
          #-Wconversion -Wsign-conversion
     $<$<CXX_COMPILER_ID:MSVC>:
          /W4>
)

set_target_properties( ${EXEC_NAME} PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED ON
    CXX_EXTENSIONS ON
)
